using System.Collections.Generic;
using System.Diagnostics.Tracing;
using System.Linq;
using System.Text;
using Jotunn.Managers;
using Jotunn.Utils;
using UnityEngine;

namespace JotunnDoc.Docs
{
    public class ShaderDoc : Doc
    {
        public ShaderDoc() : base("prefabs/shader-list.md")
        {
            PrefabManager.OnPrefabsRegistered += DocPrefabs;
        }

        private void DocPrefabs()
        {
            if (Generated)
            {
                return;
            }

            Jotunn.Logger.LogInfo("Documenting prefab shaders");

            AddHeader(1, "Prefab Shader list");
            AddText("All of the prefabs with materials and their respective shaders, keywords and properties currently in the game.");
            AddText("This file is automatically generated from Valheim using the JotunnDoc mod found on our GitHub.");
            AddTableHeader("Name", "Material", "Shader", "Keywords/Properties");

            var allPrefabs = ZNetScene.instance.m_prefabs
                .Where(x => ShaderHelper.GetRenderers(x).Any())
                .OrderBy(x => x.name);

            foreach (GameObject prefab in allPrefabs)
            {
                Dictionary<string, Material> mats = new Dictionary<string, Material>();

                foreach (Material mat in ShaderHelper.GetAllMaterials(prefab))
                {
                    const string materialInstance = " (Instance)";
                    string name = mat.name;
                    if (name.EndsWith(materialInstance))
                    {
                        name = name.Substring(0, name.Length - materialInstance.Length);
                    }
                    if (!mats.ContainsKey(name))
                    {
                        mats.Add(name, mat);
                    }
                }
                
                foreach (var entry in mats)
                {
                    Material mat = entry.Value;
                    
                    StringBuilder propsb = new StringBuilder();
                    propsb.Append("<dl>");

                    if (mat.shaderKeywords.Length > 0)
                    {
                        propsb.Append("<dt>KEYWORDS</dt>");

                        foreach (string prop in mat.shaderKeywords)
                        {
                            propsb.Append("<dd>");
                            propsb.Append(prop);
                            propsb.Append("</dd>");
                        }
                    }

                    if (mat.shader.GetPropertyCount() > 0)
                    {
                        propsb.Append("<dt>PROPERTIES</dt>");

                        for (int i = 0; i < mat.shader.GetPropertyCount(); ++i)
                        {
                            propsb.Append("<dd>");
                            propsb.Append(mat.shader.GetPropertyName(i));

                            /*string desc = mat.shader.GetPropertyDescription(i);
                            
                            if (!string.IsNullOrEmpty(desc))
                            {
                                propsb.Append($" ({desc})");
                            }*/
                            
                            propsb.Append("</dd>");

                            /*if (mat.shader.GetPropertyAttributes(i).Length > 0)
                            {
                                propsb.Append("<dd>");

                                foreach (string attr in mat.shader.GetPropertyAttributes(i))
                                {
                                    propsb.Append(attr);
                                    propsb.Append("<br />");
                                }

                                propsb.Append("</dd>");
                            }*/
                        }
                    }

                    propsb.Append("</dl>");

                    AddTableRow(prefab.name, entry.Key, mat.shader.name, propsb.ToString());
                }
            }

            Save();
        }
    }
}
