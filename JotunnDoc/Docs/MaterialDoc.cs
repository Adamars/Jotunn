using System.Collections.Generic;
using System.Linq;
using System.Text;
using Jotunn.Entities;
using Jotunn.Extensions;
using Jotunn.Managers;
using Jotunn.Utils;
using JotunnDoc.Patches;
using UnityEngine;

namespace JotunnDoc.Docs
{
    public class MaterialDoc : Doc
    {
        public MaterialDoc() : base("prefabs/material-list.md")
        {
            GameEvents.OnPlayerSpawned += DocMaterials;
        }

        private void DocMaterials(Player self)
        {
            if (Generated)
            {
                return;
            }

            Jotunn.Logger.LogInfo("Documenting prefab materials");

            AddHeader(1, "Prefab material list");
            AddText("All materials, the prefabs they are used in and their respective shaders and keywords currently in the game (ZNetScene and ZoneManager).");
            AddText($"This file is automatically generated from Valheim {Version.GetVersionString(true)} using the JotunnDoc mod found on our GitHub.");

            foreach (var location in ZoneSystem.instance.m_locations)
            {
                if (location.m_prefab.IsValid)
                {
                    location.m_prefab.Load();
                }
            }

            List<GameObject> allPrefabs = new List<GameObject>();
            allPrefabs.AddRange(ZNetScene.instance.m_nonNetViewPrefabs);
            allPrefabs.AddRange(ZNetScene.instance.m_prefabs);
            allPrefabs.AddRange(ZoneSystem.instance.m_locations.Where(x => x.m_prefab.IsValid).Select(x => x.m_prefab.Asset));

            Dictionary<string, Material> mats = new Dictionary<string, Material>();
            Dictionary<string, List<string>> matPrefabs = new Dictionary<string, List<string>>();

            foreach (GameObject prefab in allPrefabs.Where(x => !CustomPrefab.IsCustomPrefab(x.name)).OrderBy(x => x.name))
            {
                foreach (Material mat in ShaderHelper.GetAllRendererMaterials(prefab))
                {
                    string matName = mat.name;

                    // Add distinct materials
                    matName = matName.RemoveSuffix(" (Instance)");

                    if (!mats.ContainsKey(matName))
                    {
                        mats.Add(matName, mat);
                    }

                    // Add prefab per material
                    if (!matPrefabs.ContainsKey(matName))
                    {
                        matPrefabs.Add(matName, new List<string>());
                    }

                    matPrefabs[matName].Add(prefab.name);
                }
            }

            mats = mats.OrderBy(x => x.Key).ToDictionary(x => x.Key, x => x.Value);
            var materialsAM = mats.Where(p => p.Key.Length >= 1 && p.Key.ToLower()[0] < 'm');
            var materialsMZ = mats.Where(p => p.Key.Length >= 1 && p.Key.ToLower()[0] >= 'm');

            AddTableHeader("Material", "AssetID", "Prefabs", "Shader", "Keywords");

            foreach (var entry in materialsAM)
            {
                AddEntry(matPrefabs, entry.Key, entry.Value);
            }

            AddTableHeader("Material", "AssetID", "Prefabs", "Shader", "Keywords");

            foreach (var entry in materialsMZ)
            {
                AddEntry(matPrefabs, entry.Key, entry.Value);
            }

            Save();
        }

        private void AddEntry(Dictionary<string, List<string>> matPrefabs, string key, Material mat) {
            StringBuilder prefabsb = new StringBuilder();
            prefabsb.Append("<ul>");
            foreach (string prefab in matPrefabs[key].Distinct().OrderBy(x => x)) {
                prefabsb.Append("<li>");
                prefabsb.Append(prefab);
                prefabsb.Append("</li>");
            }

            prefabsb.Append("</ul>");

            StringBuilder keysb = new StringBuilder();
            keysb.Append("<dl>");
            if (mat.shaderKeywords.Length > 0) {
                foreach (string prop in mat.shaderKeywords) {
                    keysb.Append("<dd>");
                    keysb.Append(prop);
                    keysb.Append("</dd>");
                }
            }

            keysb.Append("</dl>");

            AddTableRow(key,
                AssetManager.Instance.GetAssetID<Material>(key).ToString(),
                prefabsb.ToString(),
                mat.shader.name,
                keysb.ToString()
            );
        }
    }
}
