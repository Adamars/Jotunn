using System.Collections.Generic;
using System.Linq;
using Jotunn.Entities;
using Jotunn.Managers;
using JotunnDoc.Patches;
using UnityEngine;

namespace JotunnDoc.Docs
{
    public class PrefabDoc : Doc
    {
        public PrefabDoc() : base("prefabs/prefab-list.md")
        {
            GameEvents.OnPlayerSpawned += DocPrefabs;
        }

        private void DocPrefabs(Player self)
        {
            if (Generated)
            {
                return;
            }

            Jotunn.Logger.LogInfo("Documenting prefabs");

            AddHeader(1, "Prefab list");
            AddText("All of the prefabs currently in the game (ZNetScene and ZoneManager).");
            AddText($"This file is automatically generated from Valheim {Version.GetVersionString(true)} using the JotunnDoc mod found on our GitHub.");

            foreach (var location in ZoneSystem.instance.m_locations)
            {
                if (location.m_prefab.IsValid)
                {
                    location.m_prefab.Load();
                }
            }

            List<GameObject> allPrefabs = new List<GameObject>();
            allPrefabs.AddRange(ZNetScene.instance.m_nonNetViewPrefabs);
            allPrefabs.AddRange(ZNetScene.instance.m_prefabs);
            allPrefabs.AddRange(ZoneSystem.instance.m_locations.Where(x => x.m_prefab.IsValid).Select(x => x.m_prefab.Asset));

            allPrefabs.RemoveAll(x => CustomPrefab.IsCustomPrefab(x.name));
            allPrefabs = allPrefabs.OrderBy(x => x.name).ToList();

            var prefabsAM = allPrefabs.Where(p => p.name.Length >= 1 && p.name.ToLower()[0] < 'm');
            var prefabsMZ = allPrefabs.Where(p => p.name.Length >= 1 && p.name.ToLower()[0] >= 'm');

            AddTableHeader("Name", "AssetID", "Components");

            foreach (GameObject obj in prefabsAM)
            {
                AddPrefabTableRow(obj);
            }

            AddTableHeader("Name", "AssetID", "Components");

            foreach (GameObject obj in prefabsMZ)
            {
                AddPrefabTableRow(obj);
            }

            Save();
        }

        private void AddPrefabTableRow(GameObject prefab) {
            string components = "<ul>";

            foreach (Component comp in prefab.GetComponents<Component>()) {
                components += "<li>" + comp.GetType().Name + "</li>";
            }

            components += "</ul>";

            AddTableRow(
                prefab.name,
                AssetManager.Instance.GetAssetID<GameObject>(prefab.name).ToString(),
                components
            );
        }
    }
}
