using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace JotunnDoc.Docs
{
    public class RPCDoc : Doc
    {
        private Dictionary<string, Tuple<int, string>> RPCs = new Dictionary<string, Tuple<int, string>>();

        public RPCDoc() : base("rpc/rpc-list.md")
        {
            /*On.ZRoutedRpc.InvokeRoutedRPC_long_ZDOID_string_ObjectArray += ZRoutedRpc_InvokeRoutedRPC;
            On.ZNetView.InvokeRPC_string_ObjectArray += ZNetView_InvokeRPC1;
            On.ZNetView.InvokeRPC_long_string_ObjectArray += ZNetView_InvokeRPC2;
            On.ZRpc.Invoke += ZRpc_Invoke;*/
            On.Game.OnDestroy += docCollectedRPCs;
        }
/*
        private void ZNetView_InvokeRPC2(On.ZNetView.orig_InvokeRPC_long_string_ObjectArray orig, ZNetView self, long targetID, string method, object[] parameters)
        {
            if (!RPCs.ContainsKey(method))
            {
                Jotunn.Logger.LogInfo($"Collected RPC {method}");
                int hash = method.GetStableHashCode();
                RPCs.Add(method, new Tuple<int, string>(hash, self.m_functions[hash].));
            }
        }

        private void ZNetView_InvokeRPC1(On.ZNetView.orig_InvokeRPC_string_ObjectArray orig, ZNetView self, string method, object[] parameters)
        {
            throw new NotImplementedException();
        }

        private void ZRoutedRpc_InvokeRoutedRPC(On.ZRoutedRpc.orig_InvokeRoutedRPC_long_ZDOID_string_ObjectArray orig, ZRoutedRpc self, long targetPeerID, ZDOID targetZDO, string methodName, object[] parameters)
        {
            throw new NotImplementedException();
        }

        private void ZRpc_Invoke(On.ZRpc.orig_Invoke orig, ZRpc self, string method, object[] parameters)
        {
            throw new NotImplementedException();
        }

        private void collectZNetView(On.ZNetView.orig_Register orig, ZNetView self, string name, Action<long> f)
        {
            if (!RPCs.ContainsKey(name))
            {
                Jotunn.Logger.LogInfo($"Collected RPC {name}");
                RPCs.Add(name, new Tuple<int, string>(name.GetStableHashCode(), f.Method.Name));
            }
        }

        private void collectZNetView1(On.ZNetView.orig_Register orig, ZNetView self, string name, Action<long, Type> f)
        {
            if (!RPCs.ContainsKey(name))
            {
                Jotunn.Logger.LogInfo($"Collected RPC {name}");
                RPCs.Add(name, new Tuple<int, string>(name.GetStableHashCode(), f.Method.Name));
            }
        }

        private void collectZRoutedRpc(On.ZRoutedRpc.orig_Register orig, ZRoutedRpc self, string name, Action<long> f)
        {
            if (!RPCs.ContainsKey(name))
            {
                Jotunn.Logger.LogInfo($"Collected RPC {name}");
                RPCs.Add(name, new Tuple<int, string>(name.GetStableHashCode(), f.Method.Name));
            }
        }
*/
        private void docCollectedRPCs(On.Game.orig_OnDestroy orig, Game self)
        {
            if (Generated)
            {
                return;
            }

            Jotunn.Logger.LogInfo("Writing down collected RPCs");

            AddHeader(1, "RPC list");
            AddText("All of the RPCs currently in the game.");
            AddText("This file is automatically generated from Valheim using the JotunnDoc mod found on our GitHub.");
            AddTableHeader("Name", "Hash", "Method");

            foreach (var entry in RPCs)
            {
                AddTableRow(entry.Key, entry.Value.Item1.ToString(), entry.Value.Item2);
            }

            Save();
        }
    }
}
