using System;
using System.Text;
using Jotunn.Managers;
using Jotunn.Utils;

namespace JotunnDoc.Docs
{
    class LocationDoc : Doc
    {

        public LocationDoc() : base("locations/location-list.md")
        {
            ZoneManager.OnVanillaLocationsAvailable += docLocations;
        }

        private void docLocations()
        {
            if (Generated)
            {
                return;
            }

            Jotunn.Logger.LogInfo("Documenting locations");

            AddHeader(1, "Location list");
            AddText("All of the locations currently in the game.");
            AddText("This file is automatically generated from Valheim using the JotunnDoc mod found on our GitHub.");
            AddTableHeader("Biome", "BiomeArea", "Name", "Unique", "Quantity", "Exterior radius", "Snap to water");
             
            foreach (var zoneLocation in ZoneSystem.instance.m_locations)
            {
                if (!zoneLocation.m_prefab)
                {
                    continue;
                }
                AddTableRow(
                    ToString(zoneLocation.m_biome),
                    ToString(zoneLocation.m_biomeArea),
                    zoneLocation.m_prefab.name,
                    zoneLocation.m_group,
                    zoneLocation.m_unique.ToString(),
                    zoneLocation.m_quantity.ToString(),
                    zoneLocation.m_exteriorRadius.ToString(),
                    zoneLocation.m_snapToWater.ToString()
                );
            }

            Save();
        }

        private string ToString(Heightmap.BiomeArea biomeArea)
        {
            StringBuilder biomeAreas = new StringBuilder("<ul>"); 
            foreach (Heightmap.BiomeArea area in Enum.GetValues(typeof(Heightmap.BiomeArea)))
            {
                if(area == Heightmap.BiomeArea.Everything || (biomeArea & area) == 0)
                {
                    continue;
                }
                biomeAreas.Append($"<li>{area}</li>");
            }

            biomeAreas.Append("</ul>");

            return biomeAreas.ToString();
        }

        private string ToString(Heightmap.Biome biome )
        {
            StringBuilder biomeAreas = new StringBuilder("<ul>");

            foreach (Heightmap.Biome area in Enum.GetValues(typeof(Heightmap.Biome)))
            {
                if(area == Heightmap.Biome.BiomesMax || (biome & area) == 0)
                {
                    continue;
                }

                biomeAreas.Append($"<li>{area}</li>");
            }

            biomeAreas.Append("</ul>");

            return biomeAreas.ToString();
        }
    }
}
