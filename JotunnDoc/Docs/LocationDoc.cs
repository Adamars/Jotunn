using System;
using System.IO;
using System.Linq;
using System.Text;
using Jotunn.Managers;
using UnityEngine;

namespace JotunnDoc.Docs
{
    class LocationDoc : Doc
    {

        public LocationDoc() : base("zones/location-list.md")
        {
            ZoneManager.OnVanillaLocationsAvailable += docLocations;
        }

        private void docLocations()
        {
            if (Generated)
            {
                return;
            }

            Jotunn.Logger.LogInfo("Documenting locations");

            AddHeader(1, "Locations");
            AddText("All of the locations currently in the game.");
            AddText("This file is automatically generated from Valheim using the JotunnDoc mod found on our GitHub.");

            var imageDirectory = Path.Combine(DocumentationDirConfig.Value, "images/locations");
            Directory.CreateDirectory(imageDirectory);

            var groups = ZoneSystem.instance.m_locations
                .Where(zl => zl.m_enable && zl.m_prefab)
                .GroupBy(zl => zl.m_group)
                .OrderByDescending(grouping => grouping.Key == "")
                .ThenBy(grouping => grouping.Key);

            foreach (var group in groups)
            {
                AddHeader(2, group.Key != "" ? group.Key : "No group");
                AddTableHeader("Location", "Biome", "BiomeArea", "Quantity", "Exterior radius", "Properties", "Filters", "Interior");
                foreach (var zoneLocation in group.OrderByDescending(zl => zl.m_prioritized).ThenBy(zl => zl.m_quantity))
                {
                    var path = Path.Combine(imageDirectory, $"{zoneLocation.m_prefab.name}.png");

                    var renderRequest = new RenderManager.RenderRequest(zoneLocation.m_prefab)
                    {
                        Rotation = RenderManager.IsometricRotation,
                        FieldOfView = 20f,
                        DistanceMultiplier = 1.1f
                    };

                    bool hasSprite = RenderManager.Instance.EnqueueRender(renderRequest, (Sprite sprite) =>
                    {
                        if (sprite)
                        {
                            var texture = sprite.texture;
                            var bytes = texture.EncodeToPNG();
                            File.WriteAllBytes(path, bytes);
                        }

                    });
                     
                    AddTableRow(
                        $"{zoneLocation.m_prefab.name}{(hasSprite ? $"<br>![{zoneLocation.m_prefab.name}](../../images/locations/{zoneLocation.m_prefab.name}.png)" : "")}",
                        GetBiome(zoneLocation.m_biome),
                        GetBiomeArea(zoneLocation.m_biomeArea),
                        zoneLocation.m_quantity.ToString(),
                        zoneLocation.m_exteriorRadius.ToString(),
                        GetProperties(zoneLocation),
                        GetFilters(zoneLocation),
                        GetInterior(zoneLocation)
                    ); 
                } 
            }
            Save();
        }

        private string GetFilters(ZoneSystem.ZoneLocation zoneLocation)
        {
            var inForest = zoneLocation.m_inForest && (zoneLocation.m_forestTresholdMin > 0 || zoneLocation.m_forestTresholdMax < 1);
            return "<ul>" +
                $"<li>MinAltitude: {zoneLocation.m_minAltitude}</li>" +
                $"<li>MaxAltitude: {zoneLocation.m_maxAltitude}</li>" +
                $"<li>MinTerrainDelta: {zoneLocation.m_minTerrainDelta}</li>" +
                $"<li>MaxTerrainDelta: {zoneLocation.m_maxTerrainDelta}</li>" +
                $"{(zoneLocation.m_minDistance != 0 ? $"<li>MinDistance: {zoneLocation.m_minDistance}" : "")}</li>" +
                $"{(inForest ? "" : $"<li>ForestThresholdMin: {zoneLocation.m_forestTresholdMin}")}</li>" +
                $"{(inForest ? "" : $"<li>ForestThresholdMax: {zoneLocation.m_forestTresholdMax}")}</li>" +
                $"{(zoneLocation.m_minDistanceFromSimilar != 0 ? $"<li>MinDistanceFromSimilar: {zoneLocation.m_minDistanceFromSimilar}" : "")}</li>" +
                "</ul>";
        }

        private string GetInterior(ZoneSystem.ZoneLocation zoneLocation)
        {
            if (!zoneLocation.m_location.m_hasInterior)
            {
                return "";
            }
            return $"<ul>" +
                $"<li>Name: {zoneLocation.m_location.m_interiorPrefab.name}</li>" +
                $"<li>Radius: {zoneLocation.m_interiorRadius}</li>" +
                $"<li>Environment: {zoneLocation.m_location.m_interiorEnvironment}</li>" +
                $"</ul>";
        }

        private string GetProperties(ZoneSystem.ZoneLocation zoneLocation)
        {
            return $"<ul>" +
                $"{(zoneLocation.m_prioritized ? "<li>Prioritized</li>" : "")}" +
                $"{(zoneLocation.m_unique ? "<li>Unique</li>" : "")}" +
                $"{(zoneLocation.m_group == "" ? "" : $"<li>Group: </li>{zoneLocation.m_group}</li>")}" +
                $"{(zoneLocation.m_snapToWater ? "<li>Snap to water</li>" : "")}" +
                $"{(zoneLocation.m_centerFirst ? "<li>Place in center first</li>" : "")}" +
                $"</ul>";
        }

        private string GetBiomeArea(Heightmap.BiomeArea biomeArea)
        {
            StringBuilder biomeAreas = new StringBuilder("<ul>");
            foreach (Heightmap.BiomeArea area in Enum.GetValues(typeof(Heightmap.BiomeArea)))
            {
                if (area == Heightmap.BiomeArea.Everything || (biomeArea & area) == 0)
                {
                    continue;
                }
                biomeAreas.Append($"<li>{area}</li>");
            }

            biomeAreas.Append("</ul>");

            return biomeAreas.ToString();
        }

        private string GetBiome(Heightmap.Biome biome)
        {
            StringBuilder biomeAreas = new StringBuilder("<ul>");

            foreach (Heightmap.Biome area in Enum.GetValues(typeof(Heightmap.Biome)))
            {
                if (area == Heightmap.Biome.BiomesMax || (biome & area) == 0)
                {
                    continue;
                }

                biomeAreas.Append($"<li>{area}</li>");
            }

            biomeAreas.Append("</ul>");

            return biomeAreas.ToString();
        }
    }
}
