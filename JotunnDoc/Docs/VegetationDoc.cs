using System;
using System.IO;
using System.Linq;
using System.Text;
using Jotunn.Managers;
using UnityEngine;

namespace JotunnDoc.Docs
{
    class VegetationDoc : Doc
    {

        public VegetationDoc() : base("zones/vegetation-list.md")
        {
            ZoneManager.OnVanillaLocationsAvailable += docVegetations;
        }

        private void docVegetations()
        {
            if (Generated)
            {
                return;
            }

            Jotunn.Logger.LogInfo("Documenting vegetation");

            AddHeader(1, "Vegetation");
            AddText("All of the vegetation currently in the game.");
            AddText("This file is automatically generated from Valheim using the JotunnDoc mod found on our GitHub.");

            var imageDirectory = Path.Combine(DocumentationDirConfig.Value, "images/vegetation");
            Directory.CreateDirectory(imageDirectory);
             
            AddTableHeader("Vegetation", "Biome", "BiomeArea", "Quantity", "Properties", "Filters");
            foreach (var vegetation in ZoneSystem.instance.m_vegetation.Where(zl => zl.m_enable && zl.m_prefab))
            {
                var path = Path.Combine(imageDirectory, $"{vegetation.m_prefab.name}.png");

                var renderRequest = new RenderManager.RenderRequest(vegetation.m_prefab)
                {
                    Rotation = RenderManager.IsometricRotation,
                    FieldOfView = 20f,
                    DistanceMultiplier = 1.1f
                };

                bool hasSprite = RenderManager.Instance.EnqueueRender(renderRequest, (Sprite sprite) =>
                {
                    if (sprite)
                    {
                        var texture = sprite.texture;
                        var bytes = texture.EncodeToPNG();
                        File.WriteAllBytes(path, bytes);
                    } 
                });

                AddTableRow(
                    $"{vegetation.m_prefab.name}{(hasSprite ? $"<br>![{vegetation.m_prefab.name}](../../images/vegetation/{vegetation.m_prefab.name}.png)" : "")}",
                    GetBiome(vegetation.m_biome),
                    GetBiomeArea(vegetation.m_biomeArea),
                    GetRange(vegetation.m_min, vegetation.m_max),
                    GetProperties(vegetation),
                    GetFilters(vegetation) 
                ); 
            }  
            Save();
        }

        private string GetRange(float m_min, float m_max)
        {
            if(m_min == m_max)
            {
                return m_min.ToString();
            }
            return $"{m_min} - {m_max}";
        }

        private string GetFilters(ZoneSystem.ZoneVegetation vegetation)
        {
            var inForest = vegetation.m_inForest && (vegetation.m_forestTresholdMin > 0 || vegetation.m_forestTresholdMax < 1);
            return "<ul>" +
                $"<li>MinAltitude: {vegetation.m_minAltitude}</li>" +
                $"<li>MaxAltitude: {vegetation.m_maxAltitude}</li>" +
                $"<li>MinTerrainDelta: {vegetation.m_minTerrainDelta}</li>" +
                $"<li>MaxTerrainDelta: {vegetation.m_maxTerrainDelta}</li>" +
              // $"{(zoneLocation.m_minDistance != 0 ? $"<li>MinDistance: {zoneLocation.m_minDistance}" : "")}</li>" +
                $"{(inForest ? "" : $"<li>ForestThresholdMin: {vegetation.m_forestTresholdMin}")}</li>" +
                $"{(inForest ? "" : $"<li>ForestThresholdMax: {vegetation.m_forestTresholdMax}")}</li>" +
              // $"{(zoneLocation.m_minDistanceFromSimilar != 0 ? $"<li>MinDistanceFromSimilar: {zoneLocation.m_minDistanceFromSimilar}" : "")}</li>" +
                "</ul>";
        } 

        private string GetProperties(ZoneSystem.ZoneVegetation vegetation)
        {
            return $"<ul>" +
              // $"{(vegetation.m_prioritized ? "<li>Prioritized</li>" : "")}" +
              // $"{(vegetation.m_unique ? "<li>Unique</li>" : "")}" +
              // $"{(vegetation.m_group == "" ? "" : $"<li>Group: </li>{vegetation.m_group}</li>")}" +
                $"{(vegetation.m_snapToWater ? "<li>Snap to water</li>" : "")}" +
              // $"{(vegetation.m_centerFirst ? "<li>Place in center first</li>" : "")}" +
                $"</ul>";
        }

        private string GetBiomeArea(Heightmap.BiomeArea biomeArea)
        {
            StringBuilder biomeAreas = new StringBuilder("<ul>");
            foreach (Heightmap.BiomeArea area in Enum.GetValues(typeof(Heightmap.BiomeArea)))
            {
                if (area == Heightmap.BiomeArea.Everything || (biomeArea & area) == 0)
                {
                    continue;
                }
                biomeAreas.Append($"<li>{area}</li>");
            }

            biomeAreas.Append("</ul>");

            return biomeAreas.ToString();
        }

        private string GetBiome(Heightmap.Biome biome)
        {
            StringBuilder biomeAreas = new StringBuilder("<ul>");

            foreach (Heightmap.Biome area in Enum.GetValues(typeof(Heightmap.Biome)))
            {
                if (area == Heightmap.Biome.BiomesMax || (biome & area) == 0)
                {
                    continue;
                }

                biomeAreas.Append($"<li>{area}</li>");
            }

            biomeAreas.Append("</ul>");

            return biomeAreas.ToString();
        }
    }
}
