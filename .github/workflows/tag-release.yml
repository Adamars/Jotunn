on:
  push:
    tags:
      - "v*"

name: Create Release

jobs:
  build_release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Get Valheim version id
      - name: Get Valheim version id
        id: valheimversion
        run: echo "::set-output name=valheimversion::$(curl -s https://api.steamcmd.net/v1/info/896660 | jq -r ".data.\"896660\".depots.branches.public.buildid")"

      - name: Get the version
        id: get_version
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=VERSION_NUMBER::${GITHUB_REF/refs\/tags\/v/}

      # Install NuGet
      - uses: nuget/setup-nuget@v1
        name: Install NuGet

      # Install NuGet dependencies
      - name: Install NuGet dependencies
        run: |
          nuget restore JotunnLib.sln
          dotnet restore JotunnLib/JotunnLib.csproj

      # Get build commands
      - name: Get build commands
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
          echo "deb https://download.mono-project.com/repo/ubuntu stable-bionic main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
          wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y mono-roslyn mono-complete mono-dbg msbuild unzip dirmngr dotnet-sdk-5.0 dotnet-runtime-5.0

      # Cache the results
      - name: Cache Valheim
        id: cachevalheim
        uses: actions/cache@v2
        with:
          path: ~/VHINSTALL
          key: ${{ steps.valheimversion.outputs.valheimversion }}-${{ hashFiles('**/lockfiles') }}

      - name: Install SteamCMD
        if: steps.cachevalheim.outputs.cache-hit != 'true'
        uses: CyberAndrii/setup-steamcmd@v1

      # Prepare Valheim dependencies
      - name: Prepare Valheim dependencies
        if: steps.cachevalheim.outputs.cache-hit != 'true'
        run: |
          wget -O bepinex.zip "https://valheim.thunderstore.io/package/download/denikson/BepInExPack_Valheim/5.4.800/"
          unzip bepinex.zip -d ~/BepInExRaw
          steamcmd +login anonymous +force_install_dir ~/VHINSTALL +app_update 896660 validate +exit
          mv ~/VHINSTALL/valheim_server_Data/ ~/VHINSTALL/valheim_Data/
          mv ~/BepInExRaw/BepInExPack_Valheim/* ~/VHINSTALL/

      - name: Set references to DLLs
        run: |
          echo "<?xml version=\"1.0\" encoding=\"utf-8\"?><Project ToolsVersion=\"Current\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><VALHEIM_INSTALL>$HOME/VHINSTALL/</VALHEIM_INSTALL></PropertyGroup></Project>" > Environment.props

      - name: Set JotunnLib version
        run: |
          echo "<?xml version=\"1.0\" encoding=\"utf-8\"?><Project ToolsVersion=\"Current\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><Version>${{ steps.get_version.outputs.VERSION_NUMBER }}</Version></PropertyGroup></Project>" > JotunnLib/BuildProps/version.props

      - name: Reset DoPrebuild.props
        run: |
          echo "<?xml version=\"1.0\" encoding=\"utf-8\"?><Project ToolsVersion=\"Current\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><ExecutePrebuild>true</ExecutePrebuild></PropertyGroup></Project>" > JotunnLib/BuildProps/DoPrebuild.props

#      - name: Update GitVersion.yml and version.props
#        run: |
#          cat JotunnLib/BuildProps/version.props  | sed '4s#.*#    <Version>${{ steps.get_version.outputs.VERSION_NUMBER }}</Version>#' > JotunnLib/BuildProps/version_temp.props && mv JotunnLib/BuildProps/version_temp.props JotunnLib/BuildProps/version.props

      # - name: Push version update to prod
      #   run: |
      #     git config --global user.name 'github-actions[bot]'
      #     git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
      #     git add JotunnLib/GitVersion.yml
      #     git add JotunnLib/BuildProps/version.props
      #     git commit -m "deploy: Released ${{ steps.get_version.outputs.VERSION }}"
      #     git push https://${{ secrets.PUSH_TO_PROTECTED_BRANCH }}@github.com/Valheim-Modding/Jotunn HEAD:dev

      # Build DLLs
      - name: Build solution
        run: |
          msbuild JotunnLib.sln /p:Configuration=Release
          mv JotunnLib/bin/Release/net462/JotunnLib.dll JotunnLib.dll
          msbuild JotunnLib.sln /p:Configuration=Debug
          mv JotunnLib/bin/Debug/net462/JotunnLib.dll JotunnLib-DEBUG-${{ steps.get_version.outputs.VERSION }}.dll

#      - name: Publish the package to Nuget
#        run: dotnet nuget push "JotunnLib/bin/Release/*.nupkg" -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            JotunnLib.dll
            JotunnLib-DEBUG-${{ steps.get_version.outputs.VERSION }}.dll
            JotunnLib/BuildProps/version.props
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
